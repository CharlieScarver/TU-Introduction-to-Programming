Домашното за Sem-04 за група 37 (срок за предаване 01.12 в 20:00ч) е следното:
 

1) Въвежда се число n. След това се въвеждат n на брой числа, които трябва да се запазят в списък. След това се въвежда още едно число, което определя какво ще се случи с елементите на списъка. То може да е само 0 или 1 и в зависимост от това:
        - ако е 0 - към числата на четните индекси от списъка се прибавя 5
        - ако е 1 - към числата на нечетните индекси от списъка се прибавя 10 
След промените принтирате списъка

 

2) Въвежда се число n. След това се въвеждат n двойки от стойности, които ще са първо ключ и после стойност, към която ключа ще сочи. Трябва да направите речник (dict) и да сложите ключовете и стойностите в него. 
След това се въвежда още едно число m. След него се въвеждат m на брой стойности, които трябва да запазите в списък.
Ако някой от тези стойности е съществуващ ключ в речника, трябва на нейно място в списъка да сложите стойността към която сочи ключа на речника и да изтриете този ключ от речника.
Накрая програмата ви трябва да принтира речника и списъка след извършените промени.
Пример:
5
name
Ivan
last_name
Ivanov
age
27
height
181
job
Programmer
4
last_name
random
age
job

 

 
Изход:
{'name': 'Ivan', 'height': 181}
['Apostolov', 'random', 27, 'Programmer']

 


3) Напишете функция list_avg(lst, multiplier) която намира средното аритметичната стойност от подаден списък с елементи.
В списъка може да има и елементи, които не са числа. Те трябва да се пропускат от калкулацията (не влизат нито в сумата нито в бройката)
Функцията има втори параметър multiplier, който не е задължителен.
Ако е подаден, функцията трябва да провери дали е цяло число и ако не е да принтира грешка и да прекрати изпълнението си.
Ако multiplier е подаден и е цяло число, трябва всеки елемент на списъка да се умножи по него, ако това е възможно. Това умножение се извършва преди сметката за средното аритметично. Тоест средното ще бъде сметнато от умножените елементи.
Ако не е подаден, се приема че е равен на 1. 
Функцията трябва да проверява преди делението дали делителят не е нула и ако е, да изписва събщение за грешка и да прекратява изпълнението си преди да раздели.

 

Пример: 
print(list_avg(['4', 1.5, "@7$", 3.5, (1, "hi")]))
# 3.0

 

print(list_avg(['6', 3, 3.0], 2))
# 8.0

 

print(list_avg(['%$', {}]))
# Error: Division by zero
# None

 

print(list_avg([]))
# Error: Division by zero
# None

 


4) Напишете следните функции:
Функция input_nums(n), която приема параметър цяло число и иска от потребителя да въведе n на брой елемента, които връща (с return) в списък.
Ако въведен елемент може да бъде преобразуван в цяло число (.isnumeric()) го преобразуваме и го добавяме на края на списъка, който връща функцията.
Ако въведен елемент не може да бъде преобразуван в цяло число, той бива игнориран и не се добавя в резултатния списък.
Ако параметърът на функцията n не е цяло число, функцията не иска от потребителя да въвежда елементи и директно връща празен списък.
Пример:
input_nums(3)
# Enter a list element: 2
# Enter a list element: G
# Enter a list element: 3
# [2, 3]
input_nums('a')
# []
Функция sum_list(lst), която приема параметър списък и връща сумата на елементите му.
В сумата влизат само елементи, които са числа (цели и дробни) и такива, които могат да се преобразуват в числа (като "5") като първо се преобразуват и после се добавят към сумата.
Елементи, които не са числа (цели и дробни) и не могат да се конвертират към такива, се игнорират и не влияят на сумата.
Ако списъкът се състои само от невалидни елементи се очаква функцията да върне сума 0.
Пример:
 sum_list([1, "a", 3.14, "5"])
# 9.14
sum_list(["asd", "-"])
# 0
Една допълнителна функция max_of_two(a, b), която приема две числа a и б и връща по-голямото от тях.
Ако числата са равни, връща винаги първото (а).
Ако единият от параметрите не е число, връща другия.
Ако и двата параметъра не са числа, не връща нищо (празен return).
Пример:
max_of_two(2.5, 13)
# 13
max_of_two("@#$", {})
# 
max_of_two('a', 5)
# 5
След като всички функции са готови трябва да можете да напишете без грешка следните изрази (и да можете да ги обясните):
max_of_two(sum_list(input_nums(4)), sum_list(input_nums(3)))
# ???
max_of_two(sum_list([4, "AA@", 3.12, "1"]), "9.2"))
# ???

 

 
Линкове със допълнителни задачи:
https://pynative.com/python-data-structure-exercise-for-beginners/
https://pynative.com/python-list-exercise-with-solutions/
https://pynative.com/python-dictionary-exercise-with-solutions/
https://pynative.com/python-functions-exercise-with-solutions/