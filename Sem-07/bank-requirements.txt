Напишете програма, която симулира банка.
Програмата трябва да има конзолно меню с команди, от които потребителя си избира коя да се изпълни.
След като се изпълни избраната команда отново се принтира менюто с команди и потребителят отново може да избере.
Последната команда в менюто е Exit и чрез нея се излиза от програмата.

Банката има в себе си регистрирани потребители.
Всеки потребител има имена, ЕГН и регистрирани банкови сметки.
Сметките имат IBAN, валута и тип (разплащателна, спестовна или кредитна)

Командите, които се очаква програмата да поддържа са:
- създаване на потребител
- създаване на сметка на потребител
- принтиране на всички потребители
- принтиране на всички сметки на потребител
- внасяне на пари по сметка на потребител
- теглене на пари от сметка на потребител

Всички команди, които са за един потребител изискват да се въведе неговото ЕГН.
Ако не е намерен потребител с такова ЕГН, се хвърля грешка.

Да се създадат и използват следните грешки, като всяка има съобщение по подразбиране:
InvalidUserData
UserNotFound
UserAlreadyExists
UserAlreadyOwnsAccount
AccountNotFound
UnsufficientBalance
InvalidAccountData
InvalidAccountType
InvalidMenuChoice

Всички данни се въвеждат от конзолата след като е избрана команда и се валидират.
Ако данните не са валидни, се хвърля грешка. 
Валидациите на данните да са на няколко нива - както в качения код. 
Например: Първо се валидира типа и формата на данните в Menu класа. След това на следващото ниво в Bank се валидира дали съществува или не съществува такъв обект вече.
Ако в програмата се хвърли някоя от горните грешки се очаква тя да бъде хваната и принтирана.

Програмата да се раздели на модули.
Един модул за логиката на потребителите, един за логиката на сметките, един за логиката на банката, един за дефиниция на грешките  
и накрая един основен, от който започва изпълнението на програмата и където е менюто и обработката на командите.

Следвайте начина на писане, който започнах в клас.
Кодът е качен в моето репозитори:
https://github.com/CharlieScarver/TU-Introduction-to-Programming
