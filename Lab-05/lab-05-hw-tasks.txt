Домашното от Lab-05 за 38а група е:
0) Всички задачи от края на pdf файла за Lab-05 + следните допълнителни задачи:
1) Разширени версии на функциите, които написах в клас:
Функция input_nums(n), която приема параметър цяло число и иска от потребителя да въведе n на брой елемента, които връща (с return) в списък.
Ако въведен елемент може да бъде преобразуван в цяло число (.isnumeric()) го преобразуваме и го добавяме на края на списъка, който връща функцията.
Ако въведен елемент не може да бъде преобразуван в цяло число, той бива игнориран и не се добавя в резултатния списък.
Ако параметърът на функцията n не е цяло число, функцията не иска от потребителя да въвежда елементи и директно връща празен списък.
Пример:
input_nums(3)
# Enter a list element: 2
# Enter a list element: G
# Enter a list element: 3
# [2, 3]

input_nums('a')
# []

Функция sum_list(lst), която приема параметър списък и връща сумата на елементите му.
В сумата влизат само елементи, които са числа (цели и дробни) и такива, които могат да се преобразуват в числа (като "5") като първо се преобразуват и после се добавят към сумата.
Елементи, които не са числа (цели и дробни) и не могат да се конвертират към такива, се игнорират и не влияят на сумата.
Ако списъкът се състои само от невалидни елементи се очаква функцията да върне сума 0.
Пример:
sum_list([1, "a", 3.14, "5"])
# 9.14

sum_list(["asd", "-"])
# 0

Една допълнителна функция max_of_two(a, b), която приема две числа a и б и връща по-голямото от тях.
Ако числата са равни, връща винаги първото (а).
Ако единият от параметрите не е число, връща другия.
Ако и двата параметъра не са числа, не връща нищо (празен return).
Пример:
max_of_two(2.5, 13)
# 13

max_of_two("@#$", {})
#

max_of_two('a', 5)
# 5

След като всички функции са готови трябва да можете да напишете без грешка следните изрази (и да можете да ги обясните):
max_of_two(sum_list(input_nums(4)), sum_list(input_nums(3)))
# ???

max_of_two(sum_list([4, "AA@", 3.12, "1"]), "9.2"))
# ???

2) Напишете функция list_avg(lst, multiplier) която намира средното аритметичната стойност от подаден списък с елементи.
В списъка може да има и елементи, които не са числа. Те трябва да се пропускат от калкулацията (не влизат нито в сумата нито в бройката)
Функцията има втори параметър multiplier, който не е задължителен.
Ако е подаден, функцията трябва да провери дали е цяло число и ако не е да принтира грешка и да прекрати изпълнението си.
Ако multiplier е подаден и е цяло число, трябва всеки елемент на списъка, който може да бъде умножен по него, ако е възможно. Това умножение се извършва преди сметката за средното аритметично. Тоест средното ще бъде сметнато от умножените елементи.
Пример:
Ако не е подаден, се приема че е равен на 1 и функцията просто връща средното аритметично без да прави умножение.

3) Напишете функция digitize(num), която приема цяло число и връща tuple, в който се съдържат цифрите на числото като отделни елементи (като числови стойности, не като стрингове).
Функцията трябва да валидира дали подаденият параметър е цяло число и да принтира грешка и да спре изпълнението си,  ако не е.
Използвайте разпадането на tuple на отделни променливи, за да предадете резултата на функцията на няколко променливи (всяка е равна на една цифра) и ги принтирайте.
a, b, c, d = digitize(1337)

4) Говорихме, че може да се дефинира функция вътре в друга функция.
Напишете функция get_collection_builder(col_type) която връща друга функция спрямо подадения стринг параметър col_type.
Функцията трябва да валидира дали параметърът е стринг.
Ако col_type е “tuple”, get_collection_builder връща функция, която приема 4 параметъра и връща tuple с тях.
Ако col_type е “list”, се връща функция, която приема 4 праметъра и връща list с тях.
Ако col_type е “set”, се връща функция, която приема 4 праметъра и връща set с тях.
Върнатата функция трябва да е дефинирана вътре в get_collection_builder.
Пример:
tuple_builder = get_collection_builder(“tuple”)
tup = tuple_builder(1, 2.23, 3, “hi”)
# (1, 2.23, 3, “hi”)

5) Напишете функция is_valid_triangle(a, b, c), която да връща (True/False) дали може да съществува триъгълник с подадените три страни (цели числа, валидирайте ги).
Говорихме как функциите са стойности и мога да се предават от едно място на друго и да има различни референции към една и съща функция.
Напишете код, който ще позволи следните две извиквания да извикват същата функция (все едно тя има две имена):
is_valid_triangle(3, 4, 5)
и
can_triangle_exist(3, 4, 5)

Линкове със допълнителни задачи:
https://pynative.com/python-functions-exercise-with-solutions/

Малка статия с обяснения за break/continue/pass:
https://pynative.com/python-break-continue-pass/
