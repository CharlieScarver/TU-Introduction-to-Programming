Напишете програма, която симулира операциите на банка.

=== Структура ===
Програмата има меню с команди. Потребителят избира коя команда да се изпълни като въвежда нейния номер от списъка.
Командата се изпълнява и след това менюто се показва отново. 
Това продължава докато потребителят не избере командата Exit, която е последна.
Ако потребителят избере невалиден номер, се хвърля грешка InvalidCommand, която вие трябва дефинирате.
Всички дефинирани грешки стоят в отделен модул errors.

Командите могат да изискват различни параметри да бъдат въведени от потребителя.
Трябва да се изкара съобщение на потребителя да въведе определеният параметър като има кратко обощение какъв е формата.
Например, ако примерна команда изисква да се въведе ЕГН би изписала: "Enter EGN number (len 10, digits-only): "
След въвеждането на всеки допълнителен параметър трябва да има валидация и проверка дали изискванията са покрити.
Ако не са, се хвърля грешка InvalidDataFormat, която вие трябва да дефинирате.

Основната логика на менюто седи в основния модул на програмата main.py
Това е файлът, който ще стартираме.
В него трябва да има клас Menu, който да има по един метод за всяка команда, един метод print_commands(), 
който да принтира менюто с команди и един метод run(), в който е основният цикъл на програмата.

Всички хвърлени от командите грешки се прихващат заедно и се принтира съобщението на грешката по следния начин: "Error: {message}".
Това не прекратява цикъла на цялото меню, а само на командата. 
Тоест след прихващане и принтиране на грешка менюто продължава да функционира - принтира командите и очаква избор.

=== Основна логика ===
Програмата трябва да симулира работата на банка.

Банката има в себе си регистрирани потребители и поддържа банковите операции.
Всеки потребител има имена, ЕГН и регистрирани банкови сметки.
Сметките имат IBAN, баланс, валута и тип (разплащателна, спестовна или кредитна).

В началото банката се създава без потребители в нея.

Имената на потребителите се пазят заедно в едно поле разделени с интервал.
Общата им дължина трябва да е поне 4 символа като могат да съдържат букви и цифри.
ЕГН-то е уникалният идентификатор на потребителя и трябва да е уникално за всеки потребител.
Ако при създаване на потребител се въведе съществуващо ЕГН, се хвърля грешка UserAlreadyExists.
ЕГН-то е стринг от точно 10 цифри.
Новите потребители започват без сметки. Сметките се им създават ръчно чрез команди.

IBAN за всяка сметка се генерира от банката, когато се създава сметката.
Форматът на IBAN-а е "BG9812" и след това 10 случайно избрани цифри. 
Сметките се създават с баланс нула по начало.
Валутата трябва да е една от BGN, EUR, USD, JPY. 
Ако не е, се хвърля грешка InvalidAccountCurrency.
Типа на сметката трябва да е един от CURRENT, SAVINGS, CREDIT.
Ако не е, се хвърля грешка InvalidAccountType.

Командите, които се очаква програмата да поддържа са:
- създаване на потребител
- създаване на сметка на съществуващ потребител
- принтиране на всички потребители
- принтиране на всички сметки на съществуващ потребител
- внасяне на пари по сметка на съществуващ потребител
- теглене на пари от сметка на съществуващ потребител

Всички команди, които изискват конткретен потребител изискват да се въведе негото ЕГН.
Ако потребител с такова ЕГН не съществува, се хвърля грешка UserNotFound.

Всички команди, които изискват конткретна сметка изискват да се въведе нейната валута и тип.
Ако сметка с тези валута и тип за конкретния потребител не съществува, се хвърля грешка AccountNotFound.

Менюто създава собствен обект от тип банка и го използва за изпълнение на различните операции.
Банката трябва да поддържа операциите, които командите описват.
